#!/bin/bash

cd $(dirname $(realpath $0))
source "./lib/common.sh"
source "./lib/lxc.sh"

function get_arch()
{
    local architecture
    if uname -m | grep -q "arm64" || uname -m | grep -q "aarch64"; then
        architecture="arm64"
    elif uname -m | grep -q "64"; then
        architecture="amd64"
    elif uname -m | grep -q "86"; then
        architecture="i386"
    elif uname -m | grep -q "arm"; then
        architecture="armhf"
    else
        architecture="unknown"
    fi
    echo $architecture
}

function rotate_image()
{
    local instance_to_publish=$1
    local alias_image=$2

    # Save the finger print to delete the old image later
    local finger_print_to_delete=$(lxc image info "$alias_image" | grep Fingerprint | awk '{print $2}')
    local should_restart=0

    # If the container is running, stop it
    if [ "$(lxc info $instance_to_publish | grep Status | awk '{print tolower($2)}')" = "running" ]
    then
        should_restart=1
        LXC_STOP "$instance_to_publish"
    fi

    # Create image before install
    lxc publish "$instance_to_publish" --alias "$alias_image" --public "${@:3}"
    # Remove old image
    lxc image delete "$finger_print_to_delete"

    if [ $should_restart = 1 ]
    then
        _LXC_START_AND_WAIT "$instance_to_publish"
        sleep 5
    fi
}

function rebuild_base_lxc()
{
    local YNH_BRANCH=${1:-stable}
    local DIST=${2:-buster}
    local ARCH=${3:-amd64}
    local img_name=$YNH_BRANCH-$DIST-$ARCH
    
    set -x
    LXC_NAME=$img_name
    lxc info $img_name >/dev/null && LXC_RESET

    if [ $(get_arch) = $ARCH ];
    then
        lxc launch images:debian/$DIST/$ARCH $img_name -c security.privileged=true -c security.nesting=true
    else
        lxc image info $img_name >/dev/null && lxc image delete $img_name

        tmp_dir=$(mktemp -d)
        pushd $tmp_dir

        lxc image export images:debian/$DIST/$ARCH

        tar xJf lxd.tar.xz
        local current_arch=$(get_arch)
        sed -i "0,/architecture: $ARCH/s//architecture: $current_arch/" metadata.yaml
        tar cJf lxd.tar.xz metadata.yaml templates
        lxc image import lxd.tar.xz rootfs.squashfs --alias $img_name
        popd
        rm -rf "$tmp_dir"

        lxc launch $img_name $img_name -c security.privileged=true -c security.nesting=true
    fi
    sleep 30
    
    LXC_NAME=$img_name
    
    local INSTALL_SCRIPT="https://install.yunohost.org/$DIST"

    RUN_INSIDE_LXC apt install curl -y
    RUN_INSIDE_LXC /bin/bash -c "echo exit 101 > /usr/sbin/policy-rc.d"
    RUN_INSIDE_LXC /bin/bash -c "chmod +x /usr/sbin/policy-rc.d"
    RUN_INSIDE_LXC /bin/bash -c "curl $INSTALL_SCRIPT | bash -s -- -a -d $YNH_BRANCH"
    RUN_INSIDE_LXC /bin/bash -c "rm /usr/sbin/policy-rc.d"
 
    RUN_INSIDE_LXC systemctl -q disable apt-daily.timer
    RUN_INSIDE_LXC systemctl -q disable apt-daily-upgrade.timer
    RUN_INSIDE_LXC systemctl -q disable apt-daily.service
    RUN_INSIDE_LXC systemctl -q disable apt-daily-upgrade.service
    RUN_INSIDE_LXC rm -f /etc/cron.daily/apt-compat
    RUN_INSIDE_LXC cp /bin/true /usr/lib/apt/apt.systemd.daily
    RUN_INSIDE_LXC /bin/bash -c "reboot 0"
    _LXC_START_AND_WAIT $img_name

    # Publish ynh-dev image
    local LXC_BASE="ynh-dev-$DIST-$ARCH-$YNH_BRANCH-base"
    rotate_image $img_name $LXC_BASE "os=YunoHost" "ynh-release=$YNH_BRANCH" "stage=ynh-dev" "release=${DIST^}" "architecture=$ARCH" "description=YunoHost $DIST $YNH_BRANCH ynh-dev $ARCH ($(date '+%Y%m%d'))"

    local YUNO_PWD="admin"
    local DOMAIN="domain.tld"
    local SUBDOMAIN="sub.$DOMAIN"
    local TEST_USER="package_checker"

    # Disable password strength check
    RUN_INSIDE_LXC yunohost tools postinstall --domain $DOMAIN --password $YUNO_PWD --force-password

    RUN_INSIDE_LXC yunohost settings set security.password.admin.strength -v -1
    RUN_INSIDE_LXC yunohost settings set security.password.user.strength -v -1

    RUN_INSIDE_LXC yunohost domain add $SUBDOMAIN
    TEST_USER_DISPLAY=${TEST_USER//"_"/""}
    RUN_INSIDE_LXC yunohost user create $TEST_USER --firstname $TEST_USER_DISPLAY --lastname $TEST_USER_DISPLAY --domain $DOMAIN --password "$YUNO_PWD"

    RUN_INSIDE_LXC "yunohost --version"

    LXC_BASE="ynh-appci-$DIST-$ARCH-$YNH_BRANCH-base"
    LXC_STOP $img_name
    rotate_image $img_name $LXC_BASE "os=YunoHost" "ynh-release=$YNH_BRANCH" "stage=ynh-appci" "release=${DIST^}" "architecture=$ARCH" "description=YunoHost $DIST $YNH_BRANCH ynh-appci $ARCH ($(date '+%Y%m%d'))"
    LXC_RESET $img_name
    set +x
}

function from_stable_to_another_version()
{
    local YNH_BRANCH=${1:-testing}
    local DIST=${2:-buster}
    local ARCH=${3:-amd64}
    local OLD_LXC_BASE="ynh-dev-$DIST-$ARCH-stable-base"
    local NEW_LXC_BASE="ynh-dev-$DIST-$ARCH-$YNH_BRANCH-base"

	if [ "$YNH_BRANCH" == "testing" ]; then
		source="testing"
	else
		source="testing unstable"
	fi

    set -x
    LXC_NAME="$NEW_LXC_BASE"

    lxc launch $OLD_LXC_BASE $NEW_LXC_BASE -c security.privileged=true -c security.nesting=true
    _LXC_START_AND_WAIT $NEW_LXC_BASE

    RUN_INSIDE_LXC /bin/bash -c "echo deb http://forge.yunohost.org/debian/ $DIST stable $source > /etc/apt/sources.list.d/yunohost.list"
    RUN_INSIDE_LXC /bin/bash -c "apt-get update"
    RUN_INSIDE_LXC /bin/bash -c "apt-get dist-upgrade -y"

    LXC_STOP $NEW_LXC_BASE
    rotate_image $NEW_LXC_BASE $NEW_LXC_BASE "os=YunoHost" "ynh-release=$YNH_BRANCH" "stage=ynh-dev" "release=${DIST^}" "architecture=$ARCH" "description=YunoHost $DIST $YNH_BRANCH ynh-dev $ARCH ($(date '+%Y%m%d'))"
    LXC_RESET $NEW_LXC_BASE

    OLD_LXC_BASE="ynh-appci-$DIST-$ARCH-stable-base"
    NEW_LXC_BASE="ynh-appci-$DIST-$ARCH-$YNH_BRANCH-base"
    LXC_NAME="$NEW_LXC_BASE"

    lxc launch $OLD_LXC_BASE $NEW_LXC_BASE -c security.privileged=true -c security.nesting=true
    _LXC_START_AND_WAIT $NEW_LXC_BASE

    RUN_INSIDE_LXC /bin/bash -c "echo deb http://forge.yunohost.org/debian/ $DIST stable $source > /etc/apt/sources.list.d/yunohost.list"
    RUN_INSIDE_LXC /bin/bash -c "apt-get update"
    RUN_INSIDE_LXC /bin/bash -c "apt-get dist-upgrade -y"
    
    LXC_STOP $NEW_LXC_BASE
    rotate_image $NEW_LXC_BASE $NEW_LXC_BASE "os=YunoHost" "ynh-release=$YNH_BRANCH" "stage=ynh-appci" "release=${DIST^}" "architecture=$ARCH" "description=YunoHost $DIST $YNH_BRANCH ynh-appci $ARCH ($(date '+%Y%m%d'))"
    LXC_RESET $NEW_LXC_BASE
    set +x
}

for DIST in "buster" "bullseye" # Add new debian version here
do
    for ARCH in "$(get_arch)"
    do
        rebuild_base_lxc "stable" $DIST $ARCH

        for YNH_BRANCH in "testing" "unstable"
        do
            from_stable_to_another_version $YNH_BRANCH $DIST $ARCH
        done
    done
done
